require 'test/reporters/abstract'

module Test::Reporters

  # HTML Test Reporter
  #
  # TODO: Make this more like a microformat and add timer info.
  class Html < Abstract

    #
    def start_suite(suite)
      timer_reset
      @html = []
      @html << %[<html>]
      @html << %[<head>]
      @html << %[<title>Unit Test Report</title>]
      @html << %[  <style>]
      @html << %[    html{ background: #fff; margin: 0; padding: 0; font-family: helvetica; }]
      @html << %[    body{ margin: 0; padding: 0;}]
      @html << %[    h3{color:#555;}]
      @html << %[    #main{ margin: 0 auto; color: #110; width: 600px; ]
      @html << %[           border-right: 1px solid #ddd; border-left: 1px solid #ddd; ]
      @html << %[           padding: 10px 30px; width: 500px; } ]
      @html << %[    .lemon{ color: gold; font-size: 22px; font-weight: bold; ]
      @html << %[            font-family: courier; margin-bottom: -15px;}]
      @html << %[    .tally{ font-weight: bold; margin-bottom: 10px; }]
      @html << %[    .omit{ color: cyan; }]
      @html << %[    .pass{ color: green; }]
      @html << %[    .fail{ color: red; }]
      @html << %[    .footer{ font-size: 0.7em; color: #666; margin: 20px 0; }]
      @html << %[  </style>]
      @html << %[</head>]
      @html << %[<body>]
      @html << %[<div id="main">]
      @html << %[<div class="lemon">L E M O N</div>]
      @html << %[<h1>Unit Test Report</h1>]
      @body = []
    end

    #
    def start_case(tc)
      @body << "<h2>"
      @body << tc.to_s
      @body << "</h2>"
    end

    #
    def instance(instance)
      @body << "<h3>"
      @body << "#{instance}"
      @body << "</h3>"
    end

    #
    def start_unit(unit)
       instance = unit.instance
       if @instance != instance
         @instance = instance
         instance(instance)
       end
    end

    #
    def omit(unit)
      @body << %[<li class="omit">]
      @body << "  %s  %s %s" % ["OMIT", unit.name, unit.aspect]
      @body << %[</li>]
    end

    #
    def pass(unit)
      @body << %[<li class="pass">]
      @body << "%s %s %s" % ["PASS", unit.name, unit.aspect]
      @body << %[</li>]
    end

    #
    def fail(unit, exception)
      @body << %[<li class="fail">]
      @body << "%s %s %s" % ["FAIL", unit.name, unit.aspect]
      @body << "<pre>"
      @body << "        FAIL #{exception.backtrace[0]}"
      @body << "        #{exception}"
      @body << "</pre>"
      @body << %[</li>]
    end

    #
    def error(unit, exception)
      @body << %[<li class="error">]
      @body << "%s %s %s" % ["ERROR", unit.name, unit.aspect]
      @body << "<pre>"
      @body << "        ERROR #{exception.class}"
      @body << "        #{exception}"
      @body << "        " + exception.backtrace.join("\n        ")
      @body << "</pre>"
      @body << %[</li>]
    end

    #
    def pending(unit, exception)
      @body << %[<li class="pending">]
      @body << "  %s  %s %s" % ["PENDING", unit.name, unit.aspect]
      @body << %[</li>]
    end

    #
    def finish_suite(suite)
      @html << ""
      @html << %[<div class="tally">]
      @html << tally
      @html << %[</div>]
      @html << ""

      @body << ""
      @body << %[<div class="footer">]
      @body << %[Generated by <a href="http://proutils.github.com/lemon">Lemon</a>]
      @body << %[on #{Time.now}.]
      @body << %[</div>]
      @body << ""
      @body << %[</div>]
      @body << %[</div>]
      @body << ""
      @body << %[</body>]
      @body << %[</html>]

      puts @html.join("\n")
      puts @body.join("\n")
    end

    #
    def timer
      secs  = Time.now - @time
      @time = Time.now
      return "%0.5fs" % [secs.to_s]
    end

    #
    def timer_reset
      @time = Time.now
    end

  end

end

